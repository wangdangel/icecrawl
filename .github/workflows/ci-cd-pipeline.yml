name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate Prisma client
      run: npm run prisma:generate
    
    - name: Lint
      run: npm run lint
    
    - name: Build
      run: npm run build
    
    - name: Test
      run: npm test
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./coverage/
  
  deploy-staging:
    name: Deploy to Staging
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate Prisma client
      run: npm run prisma:generate
    
    - name: Build
      run: npm run build
      
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}
        
    - name: Deploy to staging server
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.STAGING_HOST_KEY }}" >> ~/.ssh/known_hosts
        tar -czf build.tar.gz dist package.json package-lock.json prisma
        scp build.tar.gz ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }}:~/
        ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} '
          mkdir -p ~/app
          tar -xzf build.tar.gz -C ~/app
          cd ~/app
          npm ci --production
          npx prisma migrate deploy
          pm2 restart webscraper || pm2 start dist/index.js --name webscraper
        '
    
    - name: Notify on success
      if: success()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "text": "✅ Deployment to staging successful!"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    name: Deploy to Production
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate Prisma client
      run: npm run prisma:generate
    
    - name: Build
      run: npm run build
      
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
        
    - name: Deploy to production server
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.PRODUCTION_HOST_KEY }}" >> ~/.ssh/known_hosts
        tar -czf build.tar.gz dist package.json package-lock.json prisma
        scp build.tar.gz ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:~/
        ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} '
          mkdir -p ~/app
          tar -xzf build.tar.gz -C ~/app
          cd ~/app
          npm ci --production
          npx prisma migrate deploy
          pm2 restart webscraper || pm2 start dist/index.js --name webscraper
        '
    
    - name: Notify on success
      if: success()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "text": "✅ Deployment to production successful!"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
