#!/usr/bin/env node

import { program } from 'commander';
import { scrapeUrl } from './core/scraper';
import { getInputFromStdin } from './utils/stdinHelper';
import { formatScrapedData, formatError, formatLoading } from './utils/cliFormatter';
import { exporterManager } from './exporters/exporterManager';
import { pipelineManager } from './transformers/pipelineManager';
import { proxyManager } from './services/proxyManager';
import fs from 'fs';
import path from 'path';

// CLI Configuration
program
  .name('webscraper')
  .description('CLI tool for web scraping with stdin/stdout interface')
  .version('0.1.0');

// Global options
program
  .option('-f, --format <format>', 'output format (pretty, json, minimal, csv, xml, html, text, markdown)', 'pretty')
  .option('-s, --silent', 'suppress all output except the result', false)
  .option('-o, --output <file>', 'save output to file')
  .option('-b, --browser', 'use browser for JavaScript-heavy sites', false)
  .option('-t, --timeout <ms>', 'timeout in milliseconds', '10000')
  .option('-r, --retries <count>', 'number of retries', '3')
  .option('-p, --proxy', 'use proxy (if configured)', false)
  .option('--transform <transformer>', 'apply a transformer to the scraped data')
  .option('--pipeline <pipeline>', 'apply a transformation pipeline to the scraped data');

// Default command (processes stdin/stdout)
program
  .action(async (options) => {
    try {
      if (!options.silent) {
        console.error(formatLoading('Reading from stdin'));
      }
      
      // Read input from stdin
      const input = await getInputFromStdin();
      
      // Parse input (expecting a URL)
      const url = input.trim();
      if (!url || !url.startsWith('http')) {
        throw new Error('Invalid URL provided. Please provide a valid URL starting with http:// or https://');
      }
      
      if (!options.silent) {
        console.error(formatLoading(`Scraping content from ${url}`));
      }
      
      // Configure scraping options
      const scraperOptions = {
        useCache: true,
        timeout: parseInt(options.timeout),
        retries: parseInt(options.retries),
        useBrowser: options.browser,
        useProxy: options.proxy,
      };
      
      // Perform scraping
      let result = await scrapeUrl(url, scraperOptions);
      
      // Apply transformation if requested
      if (options.transform) {
        if (!options.silent) {
          console.error(formatLoading(`Applying transformer: ${options.transform}`));
        }
        result = await pipelineManager.runTransformer(options.transform, result);
      } else if (options.pipeline) {
        if (!options.silent) {
          console.error(formatLoading(`Applying pipeline: ${options.pipeline}`));
        }
        result = await pipelineManager.runPipeline(options.pipeline, result);
      }
      
      // Export the result
      let output;
      
      if (['json', 'csv', 'xml', 'html', 'text', 'markdown'].includes(options.format)) {
        // Use exporter
        if (!options.silent) {
          console.error(formatLoading(`Exporting as ${options.format}`));
        }
        
        const exported = await exporterManager.export(options.format, result);
        output = exported.data;
      } else {
        // Use formatter
        output = formatScrapedData(result, options.format);
      }
      
      // Save to file if requested
      if (options.output) {
        const outputPath = path.resolve(options.output);
        fs.writeFileSync(outputPath, output);
        
        if (!options.silent) {
          console.error(`Output saved to ${outputPath}`);
        }
      } else {
        // Output result to stdout
        console.log(output);
      }
      
    } catch (error) {
      if (!options.silent) {
        console.error(formatError(error instanceof Error ? error : new Error('An unknown error occurred')));
      }
      process.exit(1);
    }
  });

// URL command (direct URL input)
program
  .command('url <url>')
  .description('Scrape a specific URL')
  .action(async (url: string, options) => {
    try {
      if (!options.silent) {
        console.error(formatLoading(`Scraping content from ${url}`));
      }
      
      // Configure scraping options
      const scraperOptions = {
        useCache: true,
        timeout: parseInt(options.timeout),
        retries: parseInt(options.retries),
        useBrowser: options.browser,
        useProxy: options.proxy,
      };
      
      // Perform scraping
      let result = await scrapeUrl(url, scraperOptions);
      
      // Apply transformation if requested
      if (options.transform) {
        if (!options.silent) {
          console.error(formatLoading(`Applying transformer: ${options.transform}`));
        }
        result = await pipelineManager.runTransformer(options.transform, result);
      } else if (options.pipeline) {
        if (!options.silent) {
          console.error(formatLoading(`Applying pipeline: ${options.pipeline}`));
        }
        result = await pipelineManager.runPipeline(options.pipeline, result);
      }
      
      // Export the result
      let output;
      
      if (['json', 'csv', 'xml', 'html', 'text', 'markdown'].includes(options.format)) {
        // Use exporter
        if (!options.silent) {
          console.error(formatLoading(`Exporting as ${options.format}`));
        }
        
        const exported = await exporterManager.export(options.format, result);
        output = exported.data;
      } else {
        // Use formatter
        output = formatScrapedData(result, options.format);
      }
      
      // Save to file if requested
      if (options.output) {
        const outputPath = path.resolve(options.output);
        fs.writeFileSync(outputPath, output);
        
        if (!options.silent) {
          console.error(`Output saved to ${outputPath}`);
        }
      } else {
        // Output result to stdout
        console.log(output);
      }
    } catch (error) {
      if (!options.silent) {
        console.error(formatError(error instanceof Error ? error : new Error('An unknown error occurred')));
      }
      process.exit(1);
    }
  });

// List transformers command
program
  .command('transformers')
  .description('List available transformers')
  .action(() => {
    const transformers = pipelineManager.getAvailableTransformers();
    console.log('Available transformers:');
    transformers.forEach(t => {
      console.log(`- ${t.name}: ${t.description}`);
    });
  });

// List pipelines command
program
  .command('pipelines')
  .description('List available transformation pipelines')
  .action(() => {
    const pipelines = pipelineManager.getAvailablePipelines();
    console.log('Available pipelines:');
    pipelines.forEach(p => {
      console.log(`- ${p.name}: ${p.description}`);
    });
  });

// List export formats command
program
  .command('formats')
  .description('List available export formats')
  .action(() => {
    const formats = exporterManager.getAvailableExporters();
    console.log('Available export formats:');
    formats.forEach(f => {
      console.log(`- ${f.name}: ${f.contentType}`);
    });
  });

// Parse args and execute
program.parse(process.argv);
