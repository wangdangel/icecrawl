import axios, { AxiosInstance, AxiosRequestConfig } from 'axios';
import axiosRetry from 'axios-retry';
import { HttpsProxyAgent } from 'https-proxy-agent';
import { HttpProxyAgent } from 'http-proxy-agent';
import logger from './logger';

/**
 * HTTP client configuration
 */
export interface HttpClientConfig {
  retries?: number;
  timeout?: number;
  userAgent?: string;
  proxy?: {
    host: string;
    port: number;
    auth?: {
      username: string;
      password: string;
    };
  };
}

/**
 * Creates a configured HTTP client with retry and timeout handling
 * 
 * @param config - Configuration options
 * @returns Configured Axios instance
 */
export function createHttpClient(config: HttpClientConfig = {}): AxiosInstance {
  const {
    retries = 3,
    timeout = 10000,
    userAgent = 'Model-Context-Protocol-Agent/1.0',
    proxy
  } = config;
  
  // Create axios config
  const axiosConfig: AxiosRequestConfig = {
    timeout,
    headers: {
      'User-Agent': userAgent,
      'Accept': 'text/html,application/xhtml+xml,application/xml',
      'Accept-Language': 'en-US,en;q=0.9',
    },
  };
  
  // Add proxy if configured
  if (proxy) {
    const proxyUrl = proxy.auth
      ? `http://${proxy.auth.username}:${proxy.auth.password}@${proxy.host}:${proxy.port}`
      : `http://${proxy.host}:${proxy.port}`;
    
    axiosConfig.httpAgent = new HttpProxyAgent(proxyUrl);
    axiosConfig.httpsAgent = new HttpsProxyAgent(proxyUrl);
    
    logger.debug({
      message: 'Using proxy',
      host: proxy.host,
      port: proxy.port,
      auth: proxy.auth ? true : false
    });
  }
  
  // Create axios instance
  const client = axios.create(axiosConfig);
  
  // Configure retry logic
  axiosRetry(client, {
    retries,
    retryDelay: (retryCount) => retryCount * 1000, // exponential backoff
    retryCondition: (error) => {
      // Retry on network errors, timeouts, 429 (too many requests), and 5xx responses
      return (
        axiosRetry.isNetworkError(error) ||
        error.code === 'ECONNABORTED' || // Timeout
        error.response?.status === 429 ||
        (error.response?.status && error.response.status >= 500)
      );
    },
    onRetry: (retryCount, error, requestConfig) => {
      logger.warn({
        message: `Retrying request (${retryCount}/${retries})`,
        url: requestConfig.url,
        error: error.message,
        timeout: requestConfig.timeout,
      });
    },
  });
  
  // Add response time logging
  client.interceptors.request.use((config) => {
    config.headers = config.headers || {};
    config.headers['request-startTime'] = Date.now().toString();
    return config;
  });
  
  client.interceptors.response.use((response) => {
    const startTime = parseInt(response.config.headers?.['request-startTime'] as string || '0');
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    logger.debug({
      message: 'Request completed',
      method: response.config.method?.toUpperCase(),
      url: response.config.url,
      status: response.status,
      duration: `${duration}ms`,
    });
    
    return response;
  });
  
  return client;
}

// Export a default client
export const httpClient = createHttpClient();
